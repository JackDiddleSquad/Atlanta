do -- Settings
    getgenv().load_config = function(name)
        Library:load_config(readfile(Library.directory .. "/configs/" .. name .. ".cfg"))
    end

    local Column = Settings:column()
    local Section = Column:section({ name = "Options" })
    local old_config = Library:get_config()
    config_holder = Section:list({ flag = "config_name_list" })
    Section:textbox({ flag = "config_name_text_box" })
    Section:button_holder({})
    Section:button({
        name = "Create",
        callback = function()
            writefile(Library.directory .. "/configs/" .. Flags["config_name_text_box"] .. ".cfg", Library:get_config())
            Library:config_list_update()
        end,
    })
    Section:button({
        name = "Delete",
        callback = function()
            delfile(Library.directory .. "/configs/" .. Flags["config_name_list"] .. ".cfg")
            Library:config_list_update()
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Load",
        callback = function()
            Library:load_config(readfile(Library.directory .. "/configs/" .. Flags["config_name_list"] .. ".cfg"))
            Library:notification({
                text = "Loaded Config: " .. Flags["config_name_list"],
                time = 3,
            })
        end,
    })
    Section:button({
        name = "Save",
        callback = function()
            writefile(Library.directory .. "/configs/" .. Flags["config_name_list"] .. ".cfg", Library:get_config())
            Library:config_list_update()
            Library:notification({
                text = "Saved Config: " .. Flags["config_name_list"],
                time = 3,
            })
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Refresh Configs",
        callback = function()
            Library:config_list_update()
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Unload Config",
        callback = function()
            Library:load_config(old_config)
        end,
    })
    Section:button({
        name = "Unload Menu",
        callback = function()
            Library:load_config(old_config)

            for _, gui in Library.guis do
                gui:Destroy()
            end

            for _, connection in Library.connections do
                connection:Disconnect()
            end
        end,
    })

    local column = Settings:column()
    local Section = column:section({ name = "Theme" })
    Section:label({ name = "Accent" }):colorpicker({
        name = "Accent",
        color = Themes.preset.accent,
        flag = "accent",
        callback = function(color, alpha)
            Library:update_theme("accent", color)
        end,
    })
    Section
        :label({ name = "Contrast" })
        :colorpicker({
            name = "Low",
            color = Themes.preset.low_contrast,
            flag = "low_contrast",
            callback = function(color)
                if Flags["high_contrast"] and Flags["low_contrast"] then
                    Library:update_theme(
                        "contrast",
                        ColorSequence.new({
                            ColorSequenceKeypoint.new(0, Flags["low_contrast"].Color),
                            ColorSequenceKeypoint.new(1, Flags["high_contrast"].Color),
                        })
                    )
                end
            end,
        })
        :colorpicker({
            name = "High",
            color = Themes.preset.high_contrast,
            flag = "high_contrast",
            callback = function(color)
                Library:update_theme(
                    "contrast",
                    ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Flags["low_contrast"].Color),
                        ColorSequenceKeypoint.new(1, Flags["high_contrast"].Color),
                    })
                )
            end,
        })
    Section:label({ name = "Inline" }):colorpicker({
        name = "Inline",
        color = Themes.preset.inline,
        callback = function(color, alpha)
            Library:update_theme("inline", color)
        end,
    })
    Section:label({ name = "Outline" }):colorpicker({
        name = "Outline",
        color = Themes.preset.outline,
        callback = function(color, alpha)
            Library:update_theme("outline", color)
        end,
    })
    Section
        :label({ name = "Text Color" })
        :colorpicker({
            name = "Main",
            color = Themes.preset.text,
            callback = function(color, alpha)
                Library:update_theme("text", color)
            end,
        })
        :colorpicker({
            name = "Outline",
            color = Themes.preset.text_outline,
            callback = function(color, alpha)
                Library:update_theme("text_outline", color)
            end,
        })
    Section:label({ name = "Glow" }):colorpicker({
        name = "Glow",
        color = Themes.preset.glow,
        callback = function(color, alpha)
            Library:update_theme("glow", color)
        end,
    })
    Section:label({ name = "UI Bind" }):keybind({
        callback = Window.set_menu_visibility,
        key = Enum.KeyCode.Insert,
    })
    Section:toggle({
        name = "Keybind List",
        flag = "keybind_list",
        callback = function(bool)
            Library.keybind_list_frame.Visible = bool
        end,
    })
    Section:toggle({
        name = "Watermark",
        flag = "watermark",
        callback = function(bool)
            Watermark.set_visible(bool)
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Copy JobId",
        callback = function()
            setclipboard(game.JobId)
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Copy GameID",
        callback = function()
            setclipboard(game.GameId)
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Copy Join Script",
        callback = function()
            setclipboard(
                'game:GetService("TeleportService"):TeleportToPlaceInstance('
                    .. game.PlaceId
                    .. ', "'
                    .. game.JobId
                    .. '", game.Players.LocalPlayer)'
            )
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Rejoin",
        callback = function()
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, lp)
        end,
    })
    Section:button_holder({})
    Section:button({
        name = "Join New Server",
        callback = function()
            local apiRequest = game:GetService("HttpService"):JSONDecode(
                game:HttpGetAsync(
                    "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                )
            )
            local data = apiRequest.data[random(1, #apiRequest.data)]

            if data.playing <= Flags["max_players"] then
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, data.id)
            end
        end,
    })
    Section:slider({
        name = "Max Players",
        flag = "max_players",
        min = 0,
        max = 40,
        default = 15,
        interval = 1,
    })
end
